# coding=utf-8

# Generated by CodiumAI

import pytest
import torch

from atommic.collections.common.data.subsample import Gaussian2DMaskFunc
from atommic.collections.common.parts.transforms import Masker


class TestMasker:
    # Tests that the masker applies a mask to the data with default parameters
    def test_apply_mask_default_parameters(self):
        masker = Masker()
        data = torch.randn(1, 32, 320, 320, 2)
        accelerations = [8]
        center_fractions = [0.7]
        mask_func = Gaussian2DMaskFunc(center_fractions, accelerations)
        mask, _ = mask_func(data.shape)
        mask = mask.squeeze(0).squeeze(-1)
        masked_data, masks, accelerations = masker(data, mask, padding=None, seed=None)
        assert len(masked_data) == 1
        assert len(masks) == 1
        assert len(accelerations) == 1
        assert masked_data[0].shape == data.shape
        assert masks[0].shape == torch.Size([1, 1, 320, 320, 1])
        assert accelerations[0].item() == accelerations[0]

    # Tests that the masker applies a mask to the data with a precomputed mask
    def test_apply_mask_precomputed_mask(self):
        masker = Masker()
        data = torch.randn(1, 32, 320, 320, 2)
        # create random mask
        mask = torch.rand(1, 320, 320)
        masked_data, masks, accelerations = masker(data, mask, padding=None, seed=None)
        assert len(masked_data) == 1
        assert len(masks) == 1
        assert len(accelerations) == 1
        assert masked_data[0].shape == data.shape
        assert masks[0].shape == torch.Size([1, 1, 320, 320, 1])

    # Tests that the masker applies multiple precomputed masks to the data
    def test_apply_mask_multiple_precomputed_masks(self):
        masker = Masker()
        data = torch.randn(1, 32, 320, 320, 2)
        accelerations = [4, 8]
        center_fractions = [0.7, 0.7]
        mask_func = Gaussian2DMaskFunc(center_fractions, accelerations)
        mask, _ = mask_func(data.shape)
        mask = mask.squeeze(0).squeeze(-1)
        masked_data, masks, accelerations = masker(data, mask, padding=None, seed=None)
        assert len(masked_data) == 1
        assert len(masks) == 1
        assert len(accelerations) == 1
        assert masked_data[0].shape == data.shape
        assert masks[0].shape == torch.Size([1, 1, 320, 320, 1])
        assert accelerations[0].item() in accelerations
