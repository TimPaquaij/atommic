# coding=utf-8

# Generated by CodiumAI

import pytest
import torch

from atommic.collections.common.parts import rss
from atommic.collections.common.parts.transforms import GeometricDecompositionCoilCompression


class TestGeometricDecompositionCoilCompression:
    # Tests that data can be compressed with virtual coils and calibration lines defined
    def test_compress_data_with_virtual_coils_and_calibration_lines_defined(self):
        # Arrange
        virtual_coils = 5
        calib_lines = 24
        align_data = True
        fft_centered = False
        fft_normalization = "backward"
        spatial_dims = (-2, -1)
        data = torch.randn(10, 32, 32, 2)
        compressor = GeometricDecompositionCoilCompression(
            virtual_coils, calib_lines, align_data, fft_centered, fft_normalization, spatial_dims
        )

        # Act
        compressed_data = compressor(data)

        # Assert
        assert compressed_data.shape == (5, 32, 32, 2)
        assert not torch.allclose(rss(compressed_data), rss(data))

    # Tests that data can be compressed with virtual coils and calibration lines defined, and aligning compressed coils
    def test_compress_data_with_virtual_coils_and_calibration_lines_defined_and_align_data(self):
        # Arrange
        virtual_coils = 5
        calib_lines = 24
        align_data = False
        fft_centered = False
        fft_normalization = "backward"
        spatial_dims = (-2, -1)
        data = torch.randn(10, 32, 32, 2)
        compressor = GeometricDecompositionCoilCompression(
            virtual_coils, calib_lines, align_data, fft_centered, fft_normalization, spatial_dims
        )

        # Act
        compressed_data = compressor(data)

        # Assert
        assert compressed_data.shape == (5, 32, 32, 2)
        assert not torch.allclose(rss(compressed_data), rss(data))

    # Tests that data can be compressed with virtual coils and calibration lines defined, and applying forward
    # transform
    def test_compress_data_with_virtual_coils_and_calibration_lines_defined_and_apply_forward_transform(self):
        # Arrange
        virtual_coils = 5
        calib_lines = 24
        align_data = True
        fft_centered = False
        fft_normalization = "backward"
        spatial_dims = (-2, -1)
        data = torch.randn(10, 32, 32, 2)
        compressor = GeometricDecompositionCoilCompression(
            virtual_coils, calib_lines, align_data, fft_centered, fft_normalization, spatial_dims
        )

        # Act
        compressed_data = compressor(data, apply_forward_transform=True)

        # Assert
        assert compressed_data.shape == (5, 32, 32, 2)
        assert not torch.allclose(rss(compressed_data), rss(data))

    # Tests that data can be compressed with virtual coils and calibration lines defined, and applying backward
    # transform
    def test_compress_data_with_virtual_coils_and_calibration_lines_defined_and_apply_backward_transform(self):
        # Arrange
        virtual_coils = 1
        calib_lines = 24
        align_data = True
        fft_centered = False
        fft_normalization = "backward"
        spatial_dims = (-2, -1)
        data = torch.randn(10, 32, 32, 2)
        compressor = GeometricDecompositionCoilCompression(
            virtual_coils, calib_lines, align_data, fft_centered, fft_normalization, spatial_dims
        )

        # Act
        compressed_data = compressor(data)

        # Assert
        assert compressed_data.shape == (1, 32, 32, 2)
        assert not torch.allclose(rss(compressed_data), rss(data))
