# coding=utf-8
import os

import pytest
import torch

from atommic.collections.common.parts.transforms import SSDU

# Generated by CodiumAI


class TestSSDU:
    """Tests that the SSDU class applies a Gaussian mask correctly."""

    def test_apply_gaussian_mask(self):
        ssdu = SSDU(
            mask_type="Gaussian",
            rho=0.4,
            acs_block_size=(4, 4),
            gaussian_std_scaling_factor=4.0,
            outer_kspace_fraction=0.0,
            export_and_reuse_masks=False,
        )
        mask = torch.ones((10, 10))
        fname = "test.h5"
        train_mask, loss_mask = ssdu(mask, mask, fname)
        assert torch.all(train_mask == 1 - loss_mask)

    # Tests that the SSDU class applies a Uniform mask correctly
    def test_apply_uniform_mask(self):
        ssdu = SSDU(
            mask_type="Uniform",
            rho=0.4,
            acs_block_size=(4, 4),
            gaussian_std_scaling_factor=4.0,
            outer_kspace_fraction=0.0,
            export_and_reuse_masks=False,
        )
        mask = torch.ones((10, 10))
        fname = "test.h5"
        train_mask, loss_mask = ssdu(mask, mask, fname)
        assert torch.all(train_mask == 1 - loss_mask)

    # Tests that the SSDU class finds the ACS region correctly
    def test_find_acs_region(self):
        ssdu = SSDU(
            mask_type="Gaussian",
            rho=0.4,
            acs_block_size=(4, 4),
            gaussian_std_scaling_factor=4.0,
            outer_kspace_fraction=0.0,
            export_and_reuse_masks=False,
        )
        mask = torch.ones((10, 10))
        acs_region = ssdu.__find_acs_region__(mask)
        assert torch.allclose(torch.where(acs_region == 1, 1, mask), mask)

    # Tests that the SSDU class applies the outer k-space unmask correctly
    def test_apply_outer_kspace_unmask(self):
        ssdu = SSDU(
            mask_type="Gaussian",
            rho=0.4,
            acs_block_size=(4, 4),
            gaussian_std_scaling_factor=4.0,
            outer_kspace_fraction=0.5,
            export_and_reuse_masks=False,
        )
        mask = torch.ones((10, 10))
        unmasked_mask = ssdu.__apply_outer_kspace_unmask__(mask)
        assert torch.all(unmasked_mask[:, :5] == 1)
        assert torch.all(unmasked_mask[:, -5:] == 1)

    # Tests that the SSDU class raises a ValueError for an invalid mask type
    def test_invalid_mask_type(self):
        with pytest.raises(ValueError):
            SSDU(
                mask_type="Invalid",
                rho=0.4,
                acs_block_size=(4, 4),
                gaussian_std_scaling_factor=4.0,
                outer_kspace_fraction=0.0,
                export_and_reuse_masks=False,
            )
