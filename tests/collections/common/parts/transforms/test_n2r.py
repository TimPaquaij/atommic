# coding=utf-8

# Generated by CodiumAI

import pytest
import torch

from atommic.collections.common.parts.transforms import N2R


class TestN2R:
    # Tests that N2R can generate sampling masks with default parameters.
    def test_generate_default_masks(self):
        n2r = N2R()
        data = torch.randn(1, 256, 256)
        mask = torch.ones(256, 256)
        sampling_mask_noise = n2r(data, mask)
        assert sampling_mask_noise.shape == (1, 256, 256, 1)
        assert torch.allclose(sampling_mask_noise, torch.ones(1, 256, 256, 1))

    # Tests that N2R can generate sampling masks with non-zero probability.
    def test_generate_masks_with_non_zero_probability(self):
        n2r = N2R(probability=0.5)
        data = torch.randn(1, 256, 256)
        mask = torch.ones(256, 256)
        sampling_mask_noise = n2r(data, mask)
        assert sampling_mask_noise.shape == (1, 256, 256, 1)

    # Tests that N2R can generate sampling masks with non-zero standard deviations.
    def test_generate_masks_with_non_zero_std_devs(self):
        n2r = N2R(std_devs=(0.1, 0.2))
        data = torch.randn(1, 256, 256)
        mask = torch.ones(256, 256)
        sampling_mask_noise = n2r(data, mask)
        assert sampling_mask_noise.shape == (1, 256, 256, 1)
        assert torch.allclose(sampling_mask_noise, torch.ones(1, 256, 256, 1))

    # Tests that N2R can generate sampling masks with non-zero rho values.
    def test_generate_masks_with_non_zero_rho_values(self):
        n2r = N2R(rhos=(0.3, 0.4))
        data = torch.randn(1, 256, 256)
        mask = torch.ones(256, 256)
        sampling_mask_noise = n2r(data, mask)
        assert sampling_mask_noise.shape == (1, 256, 256, 1)
        assert torch.allclose(sampling_mask_noise, torch.ones(1, 256, 256, 1))

    # Tests that N2R can generate sampling masks with use_mask set to False.
    def test_generate_masks_with_use_mask_set_to_false(self):
        n2r = N2R(use_mask=False)
        data = torch.randn(1, 256, 256)
        mask = torch.ones(256, 256)
        sampling_mask_noise = n2r(data, mask)
        assert sampling_mask_noise.shape == (1, 256, 256, 1)
        assert torch.allclose(sampling_mask_noise, torch.ones(1, 256, 256, 1))

    # Tests that N2R can generate sampling masks with a mask of shape (1, ny).
    def test_generate_masks_with_mask_of_shape_1_ny(self):
        n2r = N2R()
        data = torch.randn(1, 256, 256)
        mask = torch.ones(1, 256)
        sampling_mask_noise = n2r(data, mask)
        assert sampling_mask_noise.shape == (1, 256, 1)
        assert torch.allclose(sampling_mask_noise, torch.ones(1, 256, 1))
