# coding=utf-8
# Generated by CodiumAI
import numpy as np
import pytest
import torch

from atommic.collections.common.parts.transforms import Normalizer


class TestNormalizer:
    # Tests that the Normalizer class can normalize data by its maximum value
    def test_max_normalization(self):
        # Create an instance of the Normalizer class with normalization_type="max"
        normalizer = Normalizer(normalization_type="max")

        # Create a tensor with random data
        data = torch.randn(2, 2, 2, 2, 4) + 1j * torch.randn(2, 2, 2, 2, 4)

        # Normalize the data using the Normalizer instance
        normalized_data, attrs = normalizer(data)

        assert torch.allclose(torch.max(torch.abs(normalized_data)), torch.tensor(1.0), rtol=1e3)
        assert torch.allclose(torch.min(torch.abs(normalized_data)), torch.tensor(0.1), rtol=1e3)

    # Tests that the Normalizer class can normalize data by its minimum and maximum values
    def test_minmax_normalization(self):
        # Create an instance of the Normalizer class with normalization_type="minmax"
        normalizer = Normalizer(normalization_type="minmax")

        # Create a tensor with random data
        data = torch.randn(2, 2, 2, 2, 4) + 1j * torch.randn(2, 2, 2, 2, 4)

        # Normalize the data using the Normalizer instance
        normalized_data, attrs = normalizer(data)

        min = torch.min(torch.abs(normalized_data))
        max = torch.max(torch.abs(normalized_data))

        assert torch.allclose(max - min, torch.tensor(1.0), rtol=1e3)
        assert torch.allclose(min, torch.tensor(0.1), rtol=1e3)

    # Tests that the Normalizer class can normalize complex data
    def test_mean_std_normalization(self):
        # Create an instance of the Normalizer class with normalization_type="max"
        normalizer = Normalizer(normalization_type="mean_std")

        # Create a tensor with random complex data
        data = torch.randn(2, 2, 2, 2, 4) + 1j * torch.randn(2, 2, 2, 2, 4)

        # Normalize the data using the Normalizer instance
        normalized_data, attrs = normalizer(data)

        assert torch.mean(torch.abs(normalized_data)) != torch.mean(torch.abs(data))
        assert torch.std(torch.abs(normalized_data)) != torch.std(torch.abs(data))
        assert attrs["mean"] == torch.mean(torch.abs(data))
        assert attrs["std"] == torch.std(torch.abs(data))

    def test_mean_var_normalization(self):
        # Create an instance of the Normalizer class with normalization_type="max"
        normalizer = Normalizer(normalization_type="mean_var")

        # Create a tensor with random complex data
        data = torch.randn(2, 2, 2, 2, 4) + 1j * torch.randn(2, 2, 2, 2, 4)

        # Normalize the data using the Normalizer instance
        normalized_data, attrs = normalizer(data)

        assert torch.mean(torch.abs(normalized_data)) != torch.mean(torch.abs(data))
        assert torch.std(torch.abs(normalized_data)) != torch.std(torch.abs(data))
        assert attrs["mean"] == torch.mean(torch.abs(data))
        assert attrs["std"] == torch.std(torch.abs(data))

    def test_grayscale_normalization(self):
        # Create an instance of the Normalizer class with normalization_type="max"
        normalizer = Normalizer(normalization_type="grayscale")

        # Create a tensor with random complex data
        data = torch.randn(2, 2, 2, 2, 4) + 1j * torch.randn(2, 2, 2, 2, 4)

        # Normalize the data using the Normalizer instance
        normalized_data, attrs = normalizer(data)

        assert np.round(torch.max(torch.abs(normalized_data)).item()) <= 255

    def test_fft_normalization(self):
        # Create an instance of the Normalizer class with normalization_type="max"
        normalizer = Normalizer(normalization_type="fft")

        # Create a tensor with random complex data
        data = torch.randn(2, 2, 2, 2, 4) + 1j * torch.randn(2, 2, 2, 2, 4)

        # Normalize the data using the Normalizer instance
        normalized_data, attrs = normalizer(data)
        normalized_data = torch.view_as_complex(normalized_data)

        assert torch.all(torch.eq(normalized_data, data))

    # Tests that the Normalizer class does not normalize data
    def test_do_not_normalize_data(self):
        # Create an instance of the Normalizer class with normalization_type=None
        normalizer = Normalizer(normalization_type=None)

        # Create a tensor with random data
        data = torch.randn(2, 2, 2, 2, 4) + 1j * torch.randn(2, 2, 2, 2, 4)

        # Normalize the data using the Normalizer instance
        normalized_data, attrs = normalizer(data)
        normalized_data = torch.view_as_complex(normalized_data)

        # Check that the normalized data is the same as the original data
        assert torch.all(torch.eq(normalized_data, data))
