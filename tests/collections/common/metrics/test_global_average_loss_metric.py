# coding=utf-8

# Generated by CodiumAI

import pytest
import torch

from atommic.collections.common.metrics.global_average_loss_metric import GlobalAverageLossMetric


class TestGlobalAverageLossMetric:
    # Tests that the class can be instantiated without any errors
    def test_instantiation(self):
        metric = GlobalAverageLossMetric()
        assert metric is not None

    # Tests that the update method updates the loss_sum and num_measurements attributes correctly
    def test_update_method(self):
        metric = GlobalAverageLossMetric()
        metric.update(torch.tensor(1.0), torch.tensor(1))
        assert metric.loss_sum == torch.tensor(1.0)
        assert metric.num_measurements == torch.tensor(1)
        metric.update(torch.tensor(2.0), torch.tensor(1))
        assert metric.loss_sum == torch.tensor(3.0)
        assert metric.num_measurements == torch.tensor(2)

    # Tests that the compute method returns the correct mean loss when called after update method
    def test_compute_method_mean_loss(self):
        metric = GlobalAverageLossMetric()
        metric.update(torch.tensor(1.0), torch.tensor(1))
        metric.update(torch.tensor(2.0), torch.tensor(1))
        mean_loss = metric.compute()
        assert mean_loss == torch.tensor(1.5)

    # Tests that the compute method returns NaN when num_measurements is zero
    def test_compute_method_nan(self):
        metric = GlobalAverageLossMetric()
        mean_loss = metric.compute()
        assert torch.isnan(mean_loss)

    # Tests that the update method works correctly when take_avg_loss is False
    def test_update_method_take_avg_loss_false(self):
        metric = GlobalAverageLossMetric(take_avg_loss=False)
        metric.update(torch.tensor(1.0), torch.tensor(1))
        assert metric.loss_sum == torch.tensor(1.0)
        assert metric.num_measurements == torch.tensor(1)
        metric.update(torch.tensor(2.0), torch.tensor(1))
        assert metric.loss_sum == torch.tensor(3.0)
        assert metric.num_measurements == torch.tensor(2)
